* Ex 1
#+BEGIN_QUOTE
How many ways are there to permute the letters in the word MISSISSIPPI?
#+END_QUOTE

There are 11 letters in mississippi. The expression 11! gets close
but overcounts by considering different instances of a letter in the
same position as different events. So we have to adjust for
overcounting 4 I's, 4 S's and 2 P's. So the result is

\frac{11!}{(4!)(4!)(2!)} = 34650

Here is a small python script to verify this result

#+BEGIN_SRC python :results output :exports both
from collections import Counter

word = 'MISSISSIPPI'
n = len(word)
letter_counts = Counter(word)

def dfs_count(k, letter_counts):
    if k == n:
        return 1

    num_ways = 0

    for letter in letter_counts:
        num_ways += dfs_count(k+1, letter_counts - Counter(letter))

    return num_ways

count = dfs_count(0, letter_counts)

print('There are {} ways to permute {}'.format(count, word))
#+END_SRC

#+RESULTS:
: There are 34650 ways to permute MISSISSIPPI

* Ex 2
#+BEGIN_QUOTE
(a) How many 7-digit phone numbers are possible, assuming that the
first digit can't be a 0 or a 1?

(b) Re-solve (a), except now assume also thaat the phone number is not
allowed to start with 911 (since this is reserved for emergency use
and it would not be desirable for the system to wait and see whether
more digits were going to be dialed after someone has dialed 911)
 #+END_QUOTE

We can think of this as sampling with replacement, plus some
additional constraints.

(a) = (8)(10^6) = 8000000
(b) = (8)(10^6) - 10^4 = 7990000 

Python verification script:

#+BEGIN_SRC python :results output :exports both
def dfs_count(k, length):
    if k == length:
        return 1

    count = 0
    lower = 0
    if k == 0:
        lower = 2
    for digit in range(lower, 10):
        count += dfs_count(k+1, length)

    return count

def dfs_count_911(digits, length):
    if len(digits) == length:
        return 1

    if ''.join(map(str, digits)) == '911':
        return 0

    count = 0
    lower = 0
    if len(digits) == 0:
        lower = 2
    for digit in range(lower, 10):
        count += dfs_count_911(digits + [digit], length)

    return count
    

print('(a): There are {} phone numbers'.format(dfs_count(0, 7)))
print('(b): There are {} phone numbers with 911 restriction'.format(dfs_count_911([], 7)))
#+END_SRC

#+RESULTS:
: (a): There are 8000000 phone numbers
: (b): There are 7990000 phone numbers with 911 restriction
* Ex 3
#+BEGIN_QUOTE
Fred is planning to go to dinner each night of a certain week, Monday
through Friday, with each dinner being at one of his ten favorite
restaurants.

(a) How many possibilities are there for Fred's schedule of dinners
for Monday through Friday, if Fred is not willing to eat at the same
restaurant more than once?

(b) How many possibilities are there for Fred's schedule of dinners
for that Monday through Friday, if Fred is willing to eat at the same
restaurant more than once, but not willing to eat at the same place
twice in a row (or more).
#+END_QUOTE

(a) is simple enough. The answer is 10 perm 5. Since the first day he
can choose from 10 restaurants, the second day from 9, the third from
8, and so on. The final answer is 30240.

(b) is a bit different. On Monday he can choose from 10
restaurants. On Tuesday he cannot choose the restaurant of the day
before, so he has 9 choices. On Wednesday he can choose the restaurant
from Monday again, but cannot choose the restaurant from Tuesday. On
Thursday he can choose the restaurant from Tuesday again, but not the
one from Wednesday. We see that each day one restaurant becomes
blacklisted while the previously blacklisted one becomes available
again, leaving the number of choices unchanged but always being one
less than the initial number of choices on Monday, so the result must
be (10)(9^4) = 65610.

Python validation script:

#+BEGIN_SRC python :results output :exports both
dinners_count = 5
restaurants = list(range(10)) # Label restaurants 0, 1, 2, 3, ..., 9

def ways_to_schedule_dinner_a(schedule):
    if len(schedule) == dinners_count:
        return 1

    count = 0
    for rest in restaurants:
        if rest not in schedule:
            count += ways_to_schedule_dinner_a(schedule + [rest])

    return count

def ways_to_schedule_dinner_b(schedule):
    if len(schedule) == dinners_count:
        return 1

    count = 0
    for rest in restaurants:
        if len(schedule) == 0 or rest != schedule[-1]:
            count += ways_to_schedule_dinner_b(schedule + [rest])

    return count

print('(a) Fred can make {} different schedules without eating at the same'
      'place twice'.format(ways_to_schedule_dinner_a([])))

print('(b) Fred can make {} different schedules without eating at the same'
      'place consecutively'.format(ways_to_schedule_dinner_b([])))
#+END_SRC

#+RESULTS:
: (a) Fred can make 30240 different schedules without eating at the sameplace twice
: (b) Fred can make 65610 different schedules without eating at the sameplace consecutively
* Ex 4
#+BEGIN_QUOTE
A round robin tournament is being held with n tennis players; this
means that every player will play against every other player exactly
once.

(a) How many possible outcomes are there for the tournament (the
outcome lists out who won and lost teach game).

(b) How many games are played in total?
#+END_QUOTE

I think for this problem I rather solve the questions in reverse
order.

(b) Each player will play against each other, so n(n-1) gets close,
but we are overcounting by a factor of 2, so there will be
(n(n-1))/2 games.

(a) I think we can make more sense of this by labeling the players
from each match as player 1 and player 2, and if we let 1 represent
that player a won the match (and b lost) and zero to represent that
player a lost the match (and b won). So there are 2^m possible
outcomes where m is the number of matches.

Let's verify this for some small n.

For n = 2, we have 2(2-1)/2 = 2(1)/2 = 1 games.
And 2^1 outcomes, either player 1 wins or player 2 wins.

For n = 3, we have 3(2)/2 = 3 games:

- 1 vs 2
- 1 vs 3
- 2 vs 3
  
And 2^3 = 8 possible outcomes.

- 1 beats 2, and 1 beats 3, and 2 beats 3
- 1 beats 2, and 1 beats 3, and 2 loses 3
- 1 beats 2, and 1 loses 3, and 2 beats 3
- 1 beats 2, and 1 loses 3, and 2 loses 3
- 1 loses 2, and 1 beats 3, and 2 beats 3
- 1 loses 2, and 1 beats 3, and 2 loses 3
- 1 loses 2, and 1 loses 3, and 2 beats 3
- 1 loses 2, and 1 loses 3, and 2 loses 3

  
Now by induction for (b). If we have n players and we add 1, each of
the previous players needs to play this new player, so the number of
games increases by n (in our example, when we went from 2 to 3 players
we went from 1 to 1+2 = 3 matches).

We want to prove that matches(n+1) = matches(n)+n

matches(n+1) = ((n+1)(n+1-1))/2 = ((n+1)(n))/2 = (n^2 + n)/2

but

matches(n+1) = matches(n)+n = (n(n-1))/2 + n = (n^2 - n)/2 + n = (n^2 - n + 2n)/2 = (n^2 + n)/2

Q.E.D

By induction for (a). If we have n players, we have 2^matches(n)
outcomes, adding another player adds n outcomes more (since every
current player will play the new player and eather beat him or lose to
him).

outcomes(n+1) = 2^matches(n+1) = 2^((n^2 + n)/2)

but

outcomes(n+1) = 2^matches(n) + n = 2^((n(n-1))/2 + n) = 2^((n^2 -n)/2 + n) = 2^((n^2 -n + 2n)/2) = 2^((n^2 + n)/2)

Q.E.D
